# üìã Product Requirements Document (PRD)

## üîÑ NextJS Supabase Gallery - Subscription Payments Integration

### 1Ô∏è‚É£ Product Overview

**Product Name:** NextJS Supabase Gallery - Subscription Payments Enhancement  
**Version:** 2.0  
**Date:** June 8, 2025  
**Based on:** [Vercel NextJS Subscription Payments Template](https://subscription-payments.vercel.app/)

Transform the existing NextJS Supabase Gallery from a pay-per-image model to a comprehensive subscription-based SaaS platform, implementing the proven architecture from Vercel's subscription-payments template.

### 2Ô∏è‚É£ Project Objectives

- **Primary Goal:** Implement a robust subscription-based payment system replacing the current pay-per-image model
- **Architecture Goal:** Adopt Vercel's subscription-payments template patterns and best practices
- **Business Goal:** Increase revenue through recurring subscription model vs one-time purchases
- **Technical Goal:** Enhance the existing gallery with enterprise-grade subscription management

### 3Ô∏è‚É£ Current State Analysis

#### ‚úÖ Existing Features
- NextJS 13+ with App Router
- Supabase authentication and database
- Image upload and gallery functionality  
- Basic Stripe integration (pay-per-image)
- PayPal integration
- Cryptocurrency payment support
- Docker containerization

#### üîÑ Features to Transform
- Replace individual image purchases with subscription tiers
- Enhance Stripe integration to match Vercel template standards
- Implement subscription lifecycle management
- Add customer portal functionality

### 4Ô∏è‚É£ Target Architecture (Based on Vercel Template)

```
NextJS App (Enhanced)
‚îú‚îÄ‚îÄ Authentication (Supabase Auth - Enhanced)
‚îú‚îÄ‚îÄ Subscription Management (New)
‚îÇ   ‚îú‚îÄ‚îÄ Stripe Customer Portal
‚îÇ   ‚îú‚îÄ‚îÄ Webhook Management 
‚îÇ   ‚îî‚îÄ‚îÄ Subscription Status Sync
‚îú‚îÄ‚îÄ Database Schema (Enhanced)
‚îÇ   ‚îú‚îÄ‚îÄ customers table
‚îÇ   ‚îú‚îÄ‚îÄ products table
‚îÇ   ‚îú‚îÄ‚îÄ prices table
‚îÇ   ‚îú‚îÄ‚îÄ subscriptions table
‚îÇ   ‚îî‚îÄ‚îÄ Enhanced user profiles
‚îú‚îÄ‚îÄ Gallery Access Control (New)
‚îÇ   ‚îú‚îÄ‚îÄ Subscription-based permissions
‚îÇ   ‚îú‚îÄ‚îÄ Tier-based features
‚îÇ   ‚îî‚îÄ‚îÄ Usage tracking
‚îî‚îÄ‚îÄ Admin Features (New)
    ‚îú‚îÄ‚îÄ Subscription analytics
    ‚îú‚îÄ‚îÄ Customer management
    ‚îî‚îÄ‚îÄ Product/pricing management
```

### 5Ô∏è‚É£ Core Features Implementation

#### üéØ 5.1 Enhanced Database Schema (Priority: Critical)

**Description:** Implement Vercel template's subscription database schema
**Acceptance Criteria:**
- Create `customers` table with Stripe customer mapping
- Create `products` and `prices` tables for subscription plans
- Create `subscriptions` table with status tracking
- Enhance existing `users` table with subscription metadata
- Maintain backward compatibility with existing `images` and `purchases` tables

```sql
-- Core subscription tables (based on Vercel template)
CREATE TABLE customers (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  stripe_customer_id TEXT UNIQUE
);

CREATE TABLE products (
  id TEXT PRIMARY KEY,
  active BOOLEAN,
  name TEXT,
  description TEXT,
  image TEXT,
  metadata JSONB
);

CREATE TABLE prices (
  id TEXT PRIMARY KEY,
  product_id TEXT REFERENCES products(id),
  active BOOLEAN,
  description TEXT,
  unit_amount BIGINT,
  currency TEXT CHECK (char_length(currency) = 3),
  type pricing_type,
  interval pricing_plan_interval,
  interval_count INTEGER,
  trial_period_days INTEGER,
  metadata JSONB
);

CREATE TABLE subscriptions (
  id TEXT PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  status subscription_status,
  metadata JSONB,
  price_id TEXT REFERENCES prices(id),
  quantity INTEGER,
  cancel_at_period_end BOOLEAN,
  created TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  current_period_start TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  current_period_end TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  ended_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()),
  cancel_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()),
  canceled_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()),
  trial_start TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()),
  trial_end TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now())
);
```

#### üéØ 5.2 Stripe Integration Enhancement (Priority: Critical)

**Description:** Upgrade Stripe integration to match Vercel template standards
**Acceptance Criteria:**
- Implement Stripe Checkout for subscriptions
- Add Stripe Customer Portal integration
- Create robust webhook handling for subscription events
- Add subscription status synchronization
- Implement automatic customer creation and management

**Key Components:**
```typescript
// Enhanced Stripe utilities (based on Vercel template)
- /src/lib/stripe/server.ts - Server-side Stripe configuration
- /src/lib/stripe/client.ts - Client-side Stripe configuration  
- /src/lib/stripe/admin.ts - Admin operations
- /src/utils/supabase/admin.ts - Supabase admin utilities
- /src/app/api/webhooks/stripe/route.ts - Enhanced webhook handler
```

#### üéØ 5.3 Subscription Plans & Pricing (Priority: High)

**Description:** Define and implement subscription tiers
**Acceptance Criteria:**
- Create 3-tier subscription model (Starter, Pro, Enterprise)
- Implement monthly and annual billing options
- Add trial period support
- Create pricing management interface

**Subscription Tiers:**
```typescript
interface SubscriptionTier {
  name: string;
  priceMonthly: number;
  priceAnnual: number;
  features: {
    maxUploads: number | 'unlimited';
    storageLimit: string;
    advancedFeatures: string[];
    commercialUse: boolean;
    prioritySupport: boolean;
  };
}

const SUBSCRIPTION_TIERS = {
  starter: {
    name: 'Starter',
    priceMonthly: 9.99,
    priceAnnual: 99.99,
    features: {
      maxUploads: 100,
      storageLimit: '1GB',
      advancedFeatures: ['Basic editing'],
      commercialUse: false,
      prioritySupport: false
    }
  },
  pro: {
    name: 'Pro', 
    priceMonthly: 19.99,
    priceAnnual: 199.99,
    features: {
      maxUploads: 1000,
      storageLimit: '10GB', 
      advancedFeatures: ['Advanced editing', 'Bulk operations'],
      commercialUse: true,
      prioritySupport: false
    }
  },
  enterprise: {
    name: 'Enterprise',
    priceMonthly: 49.99,
    priceAnnual: 499.99,
    features: {
      maxUploads: 'unlimited',
      storageLimit: '100GB',
      advancedFeatures: ['All features', 'API access', 'Custom branding'],
      commercialUse: true,
      prioritySupport: true
    }
  }
};
```

#### üéØ 5.4 Gallery Access Control System (Priority: High)

**Description:** Implement subscription-based access control for gallery features
**Acceptance Criteria:**
- Gate premium features behind subscription tiers
- Implement usage tracking and limits
- Add graceful degradation for expired subscriptions
- Create subscription status components

**Access Control Features:**
- Upload limits based on subscription tier
- Storage quota enforcement  
- Advanced editing features (Pro+)
- Commercial licensing (Pro+)
- API access (Enterprise)
- Priority support (Enterprise)

#### üéØ 5.5 Customer Portal Integration (Priority: High)

**Description:** Implement Stripe Customer Portal for self-service subscription management
**Acceptance Criteria:**
- Add "Manage Subscription" button in user account
- Enable plan upgrades/downgrades
- Allow subscription cancellation
- Provide billing history access
- Update payment methods

#### üéØ 5.6 Server Actions for Subscription Operations (Priority: Medium)

**Description:** Create server actions for subscription management (following Vercel template patterns)
**Acceptance Criteria:**
- `createCheckoutSession` - Create Stripe Checkout sessions
- `createCustomerPortalSession` - Access customer portal
- `getUserSubscription` - Fetch current subscription status
- `updateSubscription` - Modify subscription details
- `cancelSubscription` - Handle subscription cancellation

### 6Ô∏è‚É£ Technical Implementation Plan

#### Phase 1: Database Migration & Schema (Week 1)
- [ ] Create subscription tables migration
- [ ] Add foreign key relationships  
- [ ] Create database policies for subscription access
- [ ] Migrate existing user data

#### Phase 2: Stripe Integration Enhancement (Week 1-2)
- [ ] Upgrade Stripe SDK configuration
- [ ] Implement subscription checkout flow
- [ ] Create webhook handlers for subscription events
- [ ] Add customer portal integration
- [ ] Test webhook event handling

#### Phase 3: Access Control Implementation (Week 2)
- [ ] Create subscription guards/middleware
- [ ] Implement tier-based feature gating
- [ ] Add usage tracking components
- [ ] Create subscription status indicators

#### Phase 4: UI/UX Components (Week 2-3)
- [ ] Build pricing page component
- [ ] Create subscription management interface
- [ ] Add billing history views
- [ ] Implement plan comparison tables
- [ ] Design subscription status badges

#### Phase 5: Admin & Analytics (Week 3)
- [ ] Create admin dashboard for subscription metrics
- [ ] Add customer management interface
- [ ] Implement subscription analytics
- [ ] Create revenue reporting

### 7Ô∏è‚É£ User Stories

#### üë§ As a Gallery User
- I want to choose a subscription plan that fits my needs and budget
- I want to manage my subscription (upgrade, downgrade, cancel) without contacting support
- I want to access features based on my subscription tier
- I want to see my current usage against my plan limits
- I want to update my billing information easily

#### üíº As a Business Owner  
- I want to track subscription metrics and revenue
- I want to manage customer subscriptions and resolve issues
- I want to create and modify subscription plans
- I want to analyze customer behavior and churn

#### üõ†Ô∏è As a Developer
- I want robust error handling for subscription operations
- I want proper webhook security and validation
- I want maintainable code following Vercel template patterns
- I want comprehensive testing for payment flows

### 8Ô∏è‚É£ Migration Strategy

#### Existing User Migration
1. **Grace Period:** Provide 30-day transition period for existing users
2. **Credit System:** Convert existing purchases to subscription credits
3. **Automatic Migration:** Recommend appropriate subscription tier based on usage history
4. **Grandfathered Pricing:** Offer special pricing for early adopters

#### Data Migration
1. **Preserve Existing Data:** Maintain all current images and purchase history
2. **User Account Enhancement:** Add subscription metadata to existing profiles  
3. **Backward Compatibility:** Ensure existing API endpoints continue to work during transition

### 9Ô∏è‚É£ Security & Compliance

#### Stripe Security
- Implement proper webhook signature verification
- Use Stripe's recommended security practices
- Store sensitive data securely in environment variables
- Implement proper error handling for payment failures

#### Data Protection
- Ensure GDPR compliance for subscription data
- Implement data retention policies
- Add user data export functionality
- Secure customer payment information handling

### üîü Success Metrics

#### Business Metrics
- Monthly Recurring Revenue (MRR) growth
- Customer Acquisition Cost (CAC) 
- Customer Lifetime Value (CLV)
- Churn rate < 5% monthly
- Trial-to-paid conversion rate > 15%

#### Technical Metrics
- Subscription webhook processing success rate > 99.5%
- Payment processing uptime > 99.9%
- Subscription status sync accuracy > 99.8%
- Customer portal load time < 2 seconds

### 1Ô∏è‚É£1Ô∏è‚É£ Risk Management

| Risk | Impact | Probability | Mitigation |
|------|--------|-------------|------------|
| Stripe API changes | High | Low | Use stable API versions, monitor Stripe updates |
| Webhook failures | High | Medium | Implement retry logic, monitoring, and manual sync |
| User migration issues | Medium | Medium | Thorough testing, gradual rollout, rollback plan |
| Subscription sync errors | High | Low | Real-time monitoring, automated reconciliation |
| Revenue impact during transition | High | Medium | Gradual migration, preserve existing revenue streams |

### 1Ô∏è‚É£2Ô∏è‚É£ Testing Strategy

#### Subscription Flow Testing
- Test all subscription lifecycle events
- Verify webhook event handling
- Test subscription upgrades/downgrades
- Validate cancellation and reactivation flows

#### Payment Testing
- Use Stripe test mode for all development
- Test various payment methods and currencies
- Simulate webhook failures and retries
- Test subscription renewal scenarios

### 1Ô∏è‚É£3Ô∏è‚É£ Deployment Strategy

#### Environment Setup
- **Development:** Stripe test mode with test webhooks
- **Staging:** Mirror production with test payments
- **Production:** Live Stripe with production webhooks

#### Rollout Plan
1. **Beta Phase:** Limited user group testing (Week 4)
2. **Soft Launch:** 25% of users migrated (Week 5)
3. **Full Rollout:** 100% migration complete (Week 6)
4. **Post-Launch:** Monitor metrics and iterate (Ongoing)

### 1Ô∏è‚É£4Ô∏è‚É£ Key Dependencies

#### External Services
- Stripe API (Payments and Subscriptions)
- Supabase (Database and Auth)
- Vercel (Hosting and Deployment)

#### Internal Dependencies  
- Existing authentication system
- Current gallery functionality
- Image storage and management
- User account management

### 1Ô∏è‚É£5Ô∏è‚É£ Future Enhancements

#### Short-term (3-6 months)
- Team/organization subscription plans
- Advanced analytics dashboard
- Custom pricing for enterprise customers
- Integration with accounting software

#### Long-term (6-12 months)
- Multi-currency support
- Regional pricing strategies
- Partner/affiliate program
- API marketplace for developers

---

**Approval Required From:**
- [ ] Product Owner
- [ ] Engineering Lead  
- [ ] Business Stakeholder
- [ ] Security Team

**Estimated Timeline:** 4-6 weeks  
**Resources Required:** 1-2 Full-stack developers  
**Budget Consideration:** Stripe processing fees, additional development time

---

*This PRD serves as the foundation for implementing Vercel's subscription-payments template architecture into the NextJS Supabase Gallery application. All implementation details should reference the original Vercel template for best practices and proven patterns.*
